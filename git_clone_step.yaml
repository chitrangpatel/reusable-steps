apiVersion: tekton.dev/v1beta1
kind: MyStep
metadata:
  name: git-clone
spec:
  params:
    - name: url
    - name: revision
    - name: refspec
    - name: submodules
    - name: depth
    - name: sslVerify
    - name: crtFileName
    - name: subdirectory
    - name: sparseCheckoutDirectories
    - name: deleteExisting
    - name: httpProxy
    - name: httpsProxy
    - name: noProxy
    - name: verbose
    - name: gitInitImage
    - name: userHome
  workspaces:
    - name: output
    - name: ssh-directory
    - name: basic-auth
    - name: ssl-ca-directory
  image: "$(params.gitInitImage)"
  env:
  - name: HOME
    value: "$(params.userHome)"
  - name: PARAM_URL
    value: $(params.url)
  - name: PARAM_REVISION
    value: $(params.revision)
  - name: PARAM_REFSPEC
    value: $(params.refspec)
  - name: PARAM_SUBMODULES
    value: $(params.submodules)
  - name: PARAM_DEPTH
    value: $(params.depth)
  - name: PARAM_SSL_VERIFY
    value: $(params.sslVerify)
  - name: PARAM_CRT_FILENAME
    value: $(params.crtFileName)
  - name: PARAM_SUBDIRECTORY
    value: $(params.subdirectory)
  - name: PARAM_DELETE_EXISTING
    value: $(params.deleteExisting)
  - name: PARAM_HTTP_PROXY
    value: $(params.httpProxy)
  - name: PARAM_HTTPS_PROXY
    value: $(params.httpsProxy)
  - name: PARAM_NO_PROXY
    value: $(params.noProxy)
  - name: PARAM_VERBOSE
    value: $(params.verbose)
  - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
    value: $(params.sparseCheckoutDirectories)
  - name: PARAM_USER_HOME
    value: $(params.userHome)
  - name: WORKSPACE_OUTPUT_PATH
    value: $(workspaces.output.path)
  - name: WORKSPACE_SSH_DIRECTORY_BOUND
    value: $(workspaces.ssh-directory.bound)
  - name: WORKSPACE_SSH_DIRECTORY_PATH
    value: $(workspaces.ssh-directory.path)
  - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
    value: $(workspaces.basic-auth.bound)
  - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
    value: $(workspaces.basic-auth.path)
  - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
    value: $(workspaces.ssl-ca-directory.bound)
  - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
    value: $(workspaces.ssl-ca-directory.path)
  securityContext:
    runAsNonRoot: true
    runAsUser: 65532
  script: |
    #!/usr/bin/env sh
    set -eu
    if [ "${PARAM_VERBOSE}" = "true" ] ; then
      set -x
    fi
    if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
      cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
      cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
      chmod 400 "${PARAM_USER_HOME}/.git-credentials"
      chmod 400 "${PARAM_USER_HOME}/.gitconfig"
    fi
    if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
      cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
      chmod 700 "${PARAM_USER_HOME}"/.ssh
      chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
    fi
    if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
       export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
       if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
          export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
       fi
    fi
    CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"
    cleandir() {
      # Delete any existing contents of the repo directory if it exists.
      #
      # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
      # or the root of a mounted volume.
      if [ -d "${CHECKOUT_DIR}" ] ; then
        # Delete non-hidden files and directories
        rm -rf "${CHECKOUT_DIR:?}"/*
        # Delete files and directories starting with . but excluding ..
        rm -rf "${CHECKOUT_DIR}"/.[!.]*
        # Delete files and directories starting with .. plus any other character
        rm -rf "${CHECKOUT_DIR}"/..?*
      fi
    }
    if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
      cleandir || true
    fi
    test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
    test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
    test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"
    git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
    /ko-app/git-init \
      -url="${PARAM_URL}" \
      -revision="${PARAM_REVISION}" \
      -refspec="${PARAM_REFSPEC}" \
      -path="${CHECKOUT_DIR}" \
      -sslVerify="${PARAM_SSL_VERIFY}" \
      -submodules="${PARAM_SUBMODULES}" \
      -depth="${PARAM_DEPTH}" \
      -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
    cd "${CHECKOUT_DIR}"
    EXIT_CODE="$?"
    if [ "${EXIT_CODE}" != 0 ] ; then
      exit "${EXIT_CODE}"
    fi
